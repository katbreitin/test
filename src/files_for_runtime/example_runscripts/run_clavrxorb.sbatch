#!/bin/sh

##======== Stuff for (or related to) the batch/queue manager ==================
#SBATCH --job-name=clavrxorb
#SBATCH --partition=sandyb
#SBATCH --time=0-01:00:00
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=1
##SBATCH --output=clavrxorb.log

RUN_OPTIONS="";
TEXT_OUTPUT_FILE="";

## May have to set ANCHOR explicitly on some systems:
#ANCHOR="$HOME/CLAVRx/run";

## If a job starts in a directory different than where it was submitted, change
#   to the directory where the job was actually submitted:
#cd "$SLURM_SUBMIT_DIR";
##=============================================================================

#------------------------------------------------------------------------------
# [run_clavrxorb]
#
# Shell script that provides a convenient wrapper for a managed computer/cluster
#  (using SLURM/sbatch) when initiating a clavrxorb run.
#
# This code has been written using "heirloom" sh-syntax, which should
#  allow the greatest (easily) possible portability among "modern" computing
#  systems.  All modifications to this code should therefore employ only
#  "heirloom" sh-syntax (e.g., *NO* syntax, assumptions, or structures
#  specific to bash, ksh, tcsh, zsh, or any nonstandard "heirloom" sh).
#------------------------------------------------------------------------------

#set -x;  # May be commented out if desired (if not debugging)

# Distance ourselves (a tiny bit) from any screen/file litter; Determine
# fully-qualified filesystem location(s) where this script was
# executed from (BEG_DIR) and where this script is located (ANCHOR);
# Store this script's name (SCRIPTNAME):
echo; BEG_DIR=`pwd`;
if test "x$ANCHOR" = x; then
   cd `dirname $0`; ANCHOR=`pwd`;
fi
cd "$ANCHOR";
SCRIPT_NAME=`basename $0`;

# NOTE: $ANCHOR is *typically* the CLAVR-x "run" directory

# Execute any necessary machine setup instructions ((un)loading modules, etc.):
. $ANCHOR/../build/env_settings/autogenerated_from_cfg/bec-machine_setup;

# Check whether relevant git last-commit hashes are available; if so,
#  concatenate them into a single string:
c_chkp=../build;
gvh="";
for chkp in "$c_chkp"
do
   cd $chkp;
   if test $? -eq 0; then
      git status > /dev/null 2>&1;
      if test $? -eq 0; then
         tmp=`git log -n1 --format=format:"%H"`;
      else
         tmp="#Unknown#";
      fi
   else
      tmp="#Unknown#";
   fi
   gvh="$gvh $tmp";
   cd "$ANCHOR";
done

# Directory where version information files are located
#  (typically "$ANCHOR/etc"):
run_etc_dir=$ANCHOR/etc;

# CLAVR-x executable location/name prefix (typically "$ANCHOR/bin/clavrxorb"):
CLAVRx_exe_locnpfx=$ANCHOR/bin/clavrxorb;

#=== Set up and run CLAVR-x (any command-line arguments that are explicitly
#     provided by the user will be passed through):

cd "$BEG_DIR";

if test "x$TEXT_OUTPUT_FILE" = x; then
   ${CLAVRx_exe_locnpfx} ${RUN_OPTIONS} --gvh-str="$gvh" $@;
else
   ${CLAVRx_exe_locnpfx} ${RUN_OPTIONS} --gvh-str="$gvh" $@ > ${TEXT_OUTPUT_FILE};
fi
   
cd "$BEG_DIR";    # Return to original directory
echo; echo "$SCRIPT_NAME has now finished.";
echo; exit 0;
