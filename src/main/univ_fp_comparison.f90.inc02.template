!------------------------------------------------------------------------------
! CLAVR-x (CLouds from AVHRR - eXtended) PROCESSING SOFTWARE
!
! COPYRIGHT
! THIS SOFTWARE AND ITS DOCUMENTATION ARE CONSIDERED TO BE IN THE PUBLIC
! DOMAIN AND THUS ARE AVAILABLE FOR UNRESTRICTED PUBLIC USE. THEY ARE
! FURNISHED "AS IS." THE AUTHORS, THE UNITED STATES GOVERNMENT, ITS
! INSTRUMENTALITIES, OFFICERS, EMPLOYEES, AND AGENTS MAKE NO WARRANTY,
! EXPRESS OR IMPLIED, AS TO THE USEFULNESS OF THE SOFTWARE AND
! DOCUMENTATION FOR ANY PURPOSE. THEY ASSUME NO RESPONSIBILITY (1) FOR
! THE USE OF THE SOFTWARE AND DOCUMENTATION; OR (2) TO PROVIDE TECHNICAL
! SUPPORT TO USERS.
!------------------------------------------------------------------------------


!```````````````````````````````````````````````````````````````````
pure function eq_fp_${kind_idx_n}_${dim_n}(A, B)  result(is_equal_to)

!+ Tests for element-wise equality between the values of two given
!   ${kind_desc}, ${dim_desc} arrays of the same shape and size.

use univ_kind_defs_mod, only: ${kind_idx_use}

implicit none

!=== Argument declarations:

real(${kind_idx_dec}), dimension${dim_rank_dec}, intent(IN) :: A, B

!== Local declarations:

logical, dimension${dim_alloc} ::  &
     is_equal_to  ! Procedure result

!=== Executable statements:

is_equal_to = ( abs(A-B) < spacing(max(abs(A), abs(B))) )

end function eq_fp_${kind_idx_n}_${dim_n}


!```````````````````````````````````````````````````````````````````
pure function ne_fp_${kind_idx_n}_${dim_n}(A, B)  result(is_notequal_to)

!+ Tests for element-wise inequality between the values of two given
!   ${kind_desc}, ${dim_desc} arrays of the same shape and size.

use univ_kind_defs_mod, only: ${kind_idx_use}

implicit none

!=== Argument declarations:

real(${kind_idx_dec}), dimension${dim_rank_dec}, intent(IN) :: A, B

!== Local declarations:

logical, dimension${dim_alloc} ::  &
     is_notequal_to  ! Procedure result

!=== Executable statements:

is_notequal_to = .not.( abs(A-B) < spacing(max(abs(A), abs(B))) )

end function ne_fp_${kind_idx_n}_${dim_n}


!```````````````````````````````````````````````````````````````````
pure function ge_fp_${kind_idx_n}_${dim_n}(A, B)  result(is_greater_than_or_equal_to)

!+ Tests element-wise whether the values of the first of two given
!   ${kind_desc}, ${dim_desc} arrays of the same shape and size
!   are greater than or equal to the values of the other array.

use univ_kind_defs_mod, only: ${kind_idx_use}

implicit none

!=== Argument declarations:

real(${kind_idx_dec}), dimension${dim_rank_dec}, intent(IN) :: A, B

!== Local declarations:

real(${kind_idx_dec}), dimension${dim_alloc} ::  &
     sp

logical, dimension${dim_alloc} ::  &
     is_greater_than_or_equal_to  ! Procedure result

!=== Executable statements:

sp = spacing(max(abs(A), abs(B)))
is_greater_than_or_equal_to = ( (A-B >= sp) .or. (abs(A-B) < sp) )

end function ge_fp_${kind_idx_n}_${dim_n}


!```````````````````````````````````````````````````````````````````
pure function le_fp_${kind_idx_n}_${dim_n}(A, B)  result(is_less_than_or_equal_to)

!+ Tests element-wise whether the values of the first of two given
!   ${kind_desc}, ${dim_desc} arrays of the same shape and size
!   are less than or equal to the values of the other array.

use univ_kind_defs_mod, only: ${kind_idx_use}

implicit none

!=== Argument declarations:

real(${kind_idx_dec}), dimension${dim_rank_dec}, intent(IN) :: A, B

!== Local declarations:

real(${kind_idx_dec}), dimension${dim_alloc} ::  &
     sp

logical, dimension${dim_alloc} ::  &
     is_less_than_or_equal_to  ! Procedure result

!=== Executable statements:

sp = spacing(max(abs(A), abs(B)))
is_less_than_or_equal_to = ( (B-A >= sp) .or. (abs(A-B) < sp) )

end function le_fp_${kind_idx_n}_${dim_n}
