[Modules To Load]
 # Load modules that contain instructions to properly set up the computing
 #  environment (especially on large managed clusters/supercomputers).  These
 #  will be used during code compilation and/or at runtime.
   Shell script to load BEFORE (un)loading modules :
   Shell script to load AFTER (un)loading modules :  
   Purge any currently-loaded modules? :  yes
  # The below "Modules to ..." line(s) may be commented out, if desired:
   Modules to (un)load (in order) :  module load gcc/10.2
                                     module load hdf/4.2.15-nocdf
                                     module load hdf5/1.8.21
                                     module load netcdf4/4.8.1
                                     module load himawari/2019
                                     module load rttov/13.1

[Capabilities Which Require Special External Libraries]
 # For each capability that is desired, further specifications may need to be
 #  set in its associated "Specs" section further below.
 # NOTE: HDF4, HDF5, and NetCDF are always needed
   NWP input can be in GRIB format? :  no
   Use libHimawari (needed for HSD-format files only)? :  yes
   Use RTTOV (radiative transfer code/data) when possible? :  yes
   Use CRTM (radiative transfer code/data) when possible? :  no

[Other Executables to Build]
 # Various other test and utility programs exist within the CLAVR-x codebase and
 #  can be built along with the default/main executable(s) using this mechanism.
 #  To obtain a current list of such programs (that have been pre-configured):
 #           grep -rin '%EXE' src/
 #    ... and the names within the '()' are valid options to list below.
   Should any other executables be built? :  no
   Other executables to be built :  

[Customizable Directories For Certain Source Code Components]
 # Certain source code components can be customized at build time by specifying
 #  an alternative source code directory to use (an absolute path or a path
 #  relative to the top-level CLAVR-x directory).  An empty value indicates that
 #  the default will be used.  For example, to use an alternative ACHA codebase
 #  in "src/acha_dev", specify that directory name at the relevant line below.
   ACHA code directory to use :  

[Preferred Compilers]
   Fortran compiler :  gfortran
   C compiler :  gcc

[Compiler/Linker Options For Debugging]
 # These options are for gfortran 10 or later:
   F preprocessor options (e.g. -D and -I) :  
   F compiler options (no -I, -L, -l, or -D) :  -Wextra -Wall -fbacktrace -g -fcheck=all -fno-range-check -ffree-line-length-200 -fallow-argument-mismatch -fallow-invalid-boz
   aux1 F compiler options (no -I, -L, -l, or -D) :  -Wextra -Wall -fbacktrace -g -fcheck=all -ffpe-trap=zero,invalid,overflow -fno-range-check -ffree-line-length-200 -fno-automatic -fallow-argument-mismatch -fallow-invalid-boz
   F linker options (e.g. -L, -l) :  -v
   
   C preprocessor options (e.g. -D and -I) :  
   C compiler options (no -I, -L, -l, or -D) :  -Wextra -Wall -pedantic -g
   C linker options (e.g. -L, -l) :  -v

[Compiler/Linker Options For Production Use]
 # These options are for gfortran 10 or later:
   F preprocessor options (e.g. -D and -I) :
   F compiler options (no -I, -L, -l, or -D) :  -Wextra -Wall -fbacktrace -g -O3 -fno-range-check -ffree-line-length-200 -fallow-argument-mismatch -fallow-invalid-boz
   aux1 F compiler options (no -I, -L, -l, or -D) :  -Wextra -Wall -fbacktrace -g -O3 -ffpe-trap=zero,invalid -fno-range-check -ffree-line-length-200 -fno-automatic -fallow-argument-mismatch -fallow-invalid-boz
   F linker options (e.g. -L, -l) :  -v
   
   C preprocessor options (e.g. -D and -I) :  
   C compiler options (no -I, -L, -l, or -D) :  -Wextra -Wall -pedantic -g -O3
   C linker options (e.g. -L, -l) :  -v

# Note that environment variables can be used in the "Specs" sections below
#  via the common ${THIS_ENV_VAR} syntax.

[Specs, De-GRIB NWP]
 # ecCodes
   F include dirs :  ${SSEC_ECCODES_INC}
   F library dirs :  ${SSEC_ECCODES_LIB} 
   F preprocessor options (e.g. -D, but not -I or -L) :  -DDEGRIB
   F linker options (e.g. libraries) :  -leccodes_f90  -leccodes 

[Specs, libHimawari]
   F include dirs :  ${SSEC_HIMAWARI_INC}
   F library dirs :  ${SSEC_HIMAWARI_LIB}
   F preprocessor options (e.g. -D, but not -I or -L) :  -DLIBHIM
   F linker options (e.g. libraries) :  -Wl,-rpath,${SSEC_HIMAWARI_LIB} -lHimawari

[Specs, RTTOV]
   F include dirs :  ${SSEC_RTTOV_INC}
   F library dirs :  ${SSEC_RTTOV_LIB}
   F preprocessor options (e.g. -D, but not -I or -L) :  -DLIBRTTOV
   F linker options (e.g. libraries) :  -Wl,-rpath,${SSEC_RTTOV_LIB} -lrttov_brdf_atlas -lrttov_emis_atlas -lrttov_mw_scatt -lrttov_other -lrttov_coef_io -lrttov_parallel -lrttov_hdf -lrttov_main

[Specs, CRTM]
   F include dirs :      
   F library dirs :      
   F preprocessor options (e.g. -D, but not -I or -L) :  -DLIBCRTM
   F linker options (e.g. libraries) :

[Specs, HDF4]
   F include dirs :  ${SSEC_HDF4_INC}
   F library dirs :  ${SSEC_HDF4_LIB}
   F preprocessor options (e.g. -D, but not -I or -L) : 
   F linker options (e.g. libraries) :  -lmfhdf -ldf -lz -ljpeg

[Specs, HDF5]
   F include dirs :  ${SSEC_HDF5_INC}
   F library dirs :  ${SSEC_HDF5_LIB}
   F preprocessor options (e.g. -D, but not -I or -L) : 
   F linker options (e.g. libraries) :  -lhdf5_fortran -lhdf5hl_fortran -lhdf5_hl -lhdf5 -lz
   C include dirs :  ${SSEC_HDF5_INC}
   C library dirs :  ${SSEC_HDF5_LIB}
   C preprocessor options (e.g. -D, but not -I or -L) : 
   C linker options (e.g. libraries) :  -lhdf5_hl -lhdf5 -lz

[Specs, NetCDF]
   F include dirs :  ${SSEC_NETCDF4_INC}
   F library dirs :  ${SSEC_NETCDF4_LIB}
   F preprocessor options (e.g. -D, but not -I or -L) : 
   F linker options (e.g. libraries) :  -lnetcdff -lnetcdf
   C include dirs :  ${SSEC_NETCDF4_INC}
   C library dirs :  ${SSEC_NETCDF4_LIB}
   C preprocessor options (e.g. -D, but not -I or -L) : 
   C linker options (e.g. libraries) :  -lnetcdf

